# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GPSLayers
                                 A QGIS plugin
 Собирает слои для GPS
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-06-23
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Travin Alexzander/Roslesinforg
        email                : travin1995@inbox.ru
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QVariant
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import *
import processing
from qgis.core import (QgsApplication,
                       QgsProject,
                       QgsCoordinateReferenceSystem,
                       QgsFeature,
                       QgsExpression,
                       QgsField,
                       QgsFields,
                       QgsFeature,
                       QgsFeatureRequest,
                       QgsFeatureRenderer,
                       QgsGeometry,
                       QgsVectorDataProvider,
                       QgsVectorLayer,
                       QgsVectorFileWriter,
                       QgsWkbTypes,
                       QgsSpatialIndex,
                       QgsVectorLayerUtils,
                       QgsCoordinateTransform,
                       QgsMapLayerType,
                       QgsGeometry,
                       QgsProperty,
                       )
from .resources import *
from .GPS_Layer_dialog import GPSLayersDialog
import os.path


class GPSLayers:

    def __init__(self, iface):
        self.iface = iface
        self.plugin_dir = os.path.dirname(__file__)
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'GPSLayers_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        self.actions = []
        self.menu = self.tr(u'&Layers for GPS')

        self.first_start = None

    def tr(self, message):
        return QCoreApplication.translate('GPSLayers', message)

    def add_action(
            self,
            icon_path,
            text,
            callback,
            enabled_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=None):

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):

        icon_path = ':/plugins/GPS_Layer/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'GPS'),
            callback=self.run,
            parent=self.iface.mainWindow())

        self.first_start = True

    def unload(self):
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Layers for GPS'),
                action)
            self.iface.removeToolBarIcon(action)

    def saveSHP(self, catalog, layers):
        save_options = QgsVectorFileWriter.SaveVectorOptions()
        save_options.driverName = "ESRI Shapefile"
        save_options.fileEncoding = "UTF-8"
        save_options.ct = QgsCoordinateTransform(QgsProject.instance().crs(),
                                                 QgsCoordinateReferenceSystem("EPSG:4326"), QgsProject.instance())
        transform_context = QgsProject.instance().transformContext()
        for layer in layers:
            if layer.type() == 0:
                error = QgsVectorFileWriter.writeAsVectorFormatV2(layer,
                                                                  catalog + "/WGS84_" + layer.name(),
                                                                  transform_context,
                                                                  save_options)
                if error[0] == QgsVectorFileWriter.NoError:
                    pass
                else:
                    print(error)
            else:
                pass

    def remove(self, catalog, layers):
        for layer in layers:
            if layer.type() == 0:
                vlayer = QgsVectorLayer(f"{catalog}/WGS84_{layer.name()}.shp", f"WGS84_{layer.name()}",
                                        "ogr")
                QgsProject.instance().addMapLayer(vlayer)
                QgsProject.instance().removeMapLayer(layer)
            else:
                pass

    def dct(self):
        catalog = QFileDialog.getExistingDirectory()
        self.dlg.lineEdit.setText(catalog)

    def polkw(self, catalog, selectedLayerName):
        layers = QgsProject.instance().layerTreeRoot().children()
        save_options = QgsVectorFileWriter.SaveVectorOptions()
        save_options.driverName = "ESRI Shapefile"
        save_options.fileEncoding = "UTF-8"
        save_options.ct = QgsCoordinateTransform(QgsProject.instance().crs(),
                                                 QgsCoordinateReferenceSystem("EPSG:4326"), QgsProject.instance())
        transform_context = QgsProject.instance().transformContext()
        selectedfield = self.dlg.comboBox2.currentText()
        for layer in layers:
            if layer.name() == f"WGS84_{selectedLayerName}":
                result = processing.run(
                    "native:dissolve",
                    {'INPUT': layer.layer(),
                     'FIELD': selectedfield,
                     'OUTPUT': f"{catalog}/WGS84_полигоны-квартала.shp"})
                player = QgsVectorLayer(f"{catalog}/WGS84_полигоны-квартала.shp", "WGS84_полигоны-квартала",
                                        "ogr")
                QgsProject.instance().addMapLayer(player)

    def change_field(self, i):
        self.dlg.comboBox2.clear()
        layers = QgsProject.instance().layerTreeRoot().children()
        selectedLayer = layers[i].layer()
        fieldnames = [field.name() for field in selectedLayer.fields()]
        self.dlg.comboBox2.addItems(fieldnames)

    def set_crs(self, layers):
        for layer in layers:
            if layer.type() == 0:
                layer.setCrs(QgsProject.instance().crs())
            else:
                pass

    def point_centroid(self, catalog, selectedLayerName):
        layersINPUT = [f'WGS84_{selectedLayerName}', 'WGS84_полигоны-квартала']
        for lay in layersINPUT:
            print(f'{catalog}/{lay}№.shp')
            result = processing.run(
                "native:pointonsurface",
                {'ALL_PARTS': QgsProperty.fromExpression('centroid($geometry)'),
                 'INPUT': lay,
                 'OUTPUT': f'{catalog}/{lay}№.shp'})
            player = QgsVectorLayer(f'{catalog}/{lay}№.shp', f'{lay}№',
                                    "ogr")
            QgsProject.instance().addMapLayer(player)

    def run(self):
        self.dlg = GPSLayersDialog()
        self.dlg.toolButton.clicked.connect(self.dct)

        layers = QgsProject.instance().layerTreeRoot().children()
        self.dlg.lineEdit.clear()
        self.dlg.comboBox.clear()
        self.dlg.comboBox2.clear()
        layerlist = []
        for layer in layers:
            if layer.layer().type() == 0:
                layerlist.append(layer)
            else:
                pass
        self.dlg.comboBox.addItems([lay.name() for lay in layerlist])
        self.dlg.comboBox.setCurrentIndex(1)
        self.dlg.comboBox.currentIndexChanged.connect(self.change_field)
        self.change_field(1)

        self.dlg.show()
        result = self.dlg.exec_()
        if result:
            selectedLayerIndex = self.dlg.comboBox.currentIndex()
            selectedLayer = layers[selectedLayerIndex].layer()
            selectedLayerName = selectedLayer.name()
            catalog = self.dlg.lineEdit.text()
            if catalog == '':
                error_msg = QMessageBox()
                error_msg.setWindowTitle("Ошибка!")
                error_msg.setText(
                    "Папка назначения не задана!")
                error_msg.exec_()
            elif selectedLayer.wkbType() == 3 or selectedLayer.wkbType() == 6:
                layers = self.iface.mapCanvas().layers()
                self.set_crs(layers)
                self.saveSHP(catalog, layers)
                self.remove(catalog, layers)
                self.polkw(catalog, selectedLayerName)
                if self.dlg.checkBox.isChecked() == True:
                    self.point_centroid(catalog, selectedLayerName)
                msgBox = QMessageBox()
                msgBox.setIcon(QMessageBox.Information)
                msgBox.setText(f"Результирующие слои сохранены: {catalog}")
                msgBox.setWindowTitle("Готово!")
                msgBox.exec()
            else:
                error_msg_2 = QMessageBox()
                error_msg_2.setWindowTitle("Ошибка!")
                error_msg_2.setText(
                    "Выбраный слой не полигональный!")
                error_msg_2.exec_()
        else:
            pass
